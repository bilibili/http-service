import{_ as d,B as o,o as i,c as l,k as e,a as t,G as a,Q as s}from"./chunks/framework.61af9522.js";const f=JSON.parse('{"title":"HTTP Service 是什么","description":"","frontmatter":{},"headers":[],"relativePath":"intro/what-is.md","filePath":"intro/what-is.md"}'),n={name:"intro/what-is.md"},c={id:"http-service-是什么",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#http-service-是什么","aria-label":'Permalink to "HTTP Service 是什么 <Badge type="tip" text="概念介绍" />"'},"​",-1),p=s('<p>HTTP Service（HTTP服务），是一个可以用于Web前端 CSR（客户端渲染）以及 SSR（服务端渲染）场景下统一的HTTP Request SDK，我们通常称其为<code>请求库</code>或者<code>统一请求库</code>。</p><p>其设计模式主要借鉴于服务端框架的 middleware 模式，如<code>koa</code>，在发起请求部分，我们保留了 Axios 用户发起请求的习惯。</p><p>在发起请求的部分，我们遵循 WHATWG Fetch 规范，使用 Fetch API 作为发起请求中间件的内核，于是在现代浏览器中，你可以在不使用任何 polyfill 的情况下使用 HTTP Service。当然我们也为旧版浏览器提供了 polyfill 方案以及为NodeJS用户提供了服务端的使用方案。</p><p>通过使用 HTTP Service，你可以通过装配中间件的方式来优雅地组织逻辑发起HTTP请求。</p><div class="tip custom-block" style="padding-top:8px;"><p>想直接使用? 前往 <a href="./../guide/getting-started.html">开始上手</a>.</p></div><h2 id="能力对比" tabindex="-1">能力对比 <a class="header-anchor" href="#能力对比" aria-label="Permalink to &quot;能力对比&quot;">​</a></h2><ul><li><strong>XMLHttpRequest VS Fetch</strong></li></ul><table><thead><tr><th>特点</th><th>XMLHttpRequest</th><th>fetch API</th></tr></thead><tbody><tr><td><strong>语法</strong></td><td>使用回调函数处理异步请求</td><td>基于 Promise，支持 <code>async/await</code></td></tr><tr><td><strong>流式传输</strong></td><td>不支持</td><td>支持流式传输（例如可以逐步读取响应体）⭐️</td></tr><tr><td><strong>监控请求进度</strong></td><td>支持⭐️</td><td>不支持</td></tr><tr><td><strong>错误处理</strong></td><td>只在网络故障或请求被阻止时抛出异常</td><td>默认不会因 HTTP 错误状态而抛出异常</td></tr><tr><td><strong>请求/响应格式</strong></td><td>支持文本和二进制数据</td><td>支持多种格式，包括 JSON、文本、FormData、Blob 等⭐️</td></tr><tr><td><strong>浏览器支持</strong></td><td>在所有主流浏览器中广泛支持</td><td>在现代浏览器中支持，但不支持旧版浏览器</td></tr><tr><td><strong>Service Worker</strong></td><td>不支持</td><td>支持⭐️</td></tr><tr><td><strong>中止请求</strong></td><td>通过 <code>abort()</code> 方法</td><td>使用 <code>AbortController</code></td></tr><tr><td><strong>控制重定向</strong></td><td>不支持</td><td>支持⭐️</td></tr><tr><td><strong>信任策略</strong></td><td>默认发送带有凭据的请求（如 cookies）</td><td>默认不包含凭据，但可以配置⭐️</td></tr><tr><td><strong>活跃度</strong></td><td>停止维护</td><td>不断迭代⭐️</td></tr></tbody></table><p>相比XHR，我们为请求库提供了<code>监控请求进度</code>适配方案，详见 <a href="./what-is.html">监控请求进度中间件</a></p><ul><li><strong>多种SDK横向对比</strong></li></ul><table><thead><tr><th style="text-align:center;">Package</th><th style="text-align:center;">Bundle Size</th><th style="text-align:center;">Extensibility</th><th style="text-align:center;">Browser Compatibility</th></tr></thead><tbody><tr><td style="text-align:center;">Axios</td><td style="text-align:center;">☁️☁️☁️</td><td style="text-align:center;">🔧🔧</td><td style="text-align:center;">⭐️⭐️⭐️</td></tr><tr><td style="text-align:center;">Fetch+polyfill</td><td style="text-align:center;">☁️+☁️☁️</td><td style="text-align:center;">🔧</td><td style="text-align:center;">⭐️⭐️+⭐️</td></tr><tr><td style="text-align:center;">HTTP Service</td><td style="text-align:center;">☁️☁️+☁️</td><td style="text-align:center;">🔧🔧🔧</td><td style="text-align:center;">⭐️⭐️⭐️</td></tr></tbody></table><p>体积方面：</p><ul><li>Axios 31KB | 11KB(gzipped)</li><li>Fetch 0K(Modern Browser or NodeJS v18+) | Polyfill 8.8K | 3K(gzipped)</li><li>HTTP Service 22KB | 13KB(gzipped) | 20K(With Fetch Polyfill) ✅</li></ul><p>Tips：上为请求服务最基本的package size，不含各项扩展能力</p><p>拓展性方面：</p><ul><li>Axios 提供了 Interceptors（拦截器）作为主要干预请求前后的能力</li><li>Fetch 是一个底层库，主要作为<strong>基础请求能力</strong>来进行封装</li><li>HTTP Service 基于链式调用中间件（类似插件形式），灵活，拓展性强 ✅</li></ul><p>浏览器兼容性方面：</p><ul><li>Axios 已经稳定运行多年，兼容性良好</li><li>Fetch 在较老的浏览器上没有支持，因此业务引入的时候需要考虑polyfill</li><li>HTTP Service 基于Fetch协议，面向未来，同时可以根据项目运行环境按需引入polyfill，从而使兼容性无需担忧 ✅</li></ul><h2 id="致谢" tabindex="-1">致谢 <a class="header-anchor" href="#致谢" aria-label="Permalink to &quot;致谢&quot;">​</a></h2><p>感谢以下项目，它们的设计和实现为HTTP Service的开发提供了宝贵的参考：</p><ul><li><a href="https://github.com/axios/axios" target="_blank" rel="noreferrer">axios</a>：承载了众多HTTP请求处理的优秀实践，在API层面，我们充分考虑到前端领域中 Axios 的影响，因此也保留了一些Axios用户的使用习惯。</li><li><a href="https://github.com/koajs/koa" target="_blank" rel="noreferrer">koa</a>：现代的Web框架，其中间件架构为我们的设计提供了灵感。</li><li><a href="https://github.com/vuejs/vitepress" target="_blank" rel="noreferrer">vitepress</a>：本文档站点由 VitePress 驱动。</li><li><a href="./wonder.html">wonder</a>：如果您阅读到了这里，非常感谢您的耐心，这里有一个精心准备的异想，希望能对您有所帮助。</li></ul>',21);function g(T,x,_,y,u,P){const r=o("Badge");return i(),l("div",null,[e("h1",c,[t("HTTP Service 是什么 "),a(r,{type:"tip",text:"概念介绍"}),t(),h]),p])}const S=d(n,[["render",g]]);export{f as __pageData,S as default};
