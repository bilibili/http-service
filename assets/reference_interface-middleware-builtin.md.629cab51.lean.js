import{_ as p,z as o,o as e,c as t,k as n,a,D as c,N as r}from"./chunks/framework.8cca3e42.js";const g=JSON.parse('{"title":"内置中间件","description":"","frontmatter":{},"headers":[],"relativePath":"reference/interface-middleware-builtin.md","filePath":"reference/interface-middleware-builtin.md"}'),i={name:"reference/interface-middleware-builtin.md"},y={id:"内置中间件",tabindex:"-1"};function D(F,s,B,d,E,f){const l=o("Badge");return e(),t("div",null,[n("h1",y,[s[0]||(s[0]=a("内置中间件 ",-1)),c(l,{type:"tip",text:"概念介绍"}),s[1]||(s[1]=a()),s[2]||(s[2]=n("a",{class:"header-anchor",href:"#内置中间件","aria-label":'Permalink to "内置中间件 <Badge type="tip" text="概念介绍" />"'},"​",-1))]),s[3]||(s[3]=r(`<ol><li>初始化Context</li><li>XSRF</li><li>请求体封装</li><li>超时</li><li>发起请求</li><li>响应转化data</li><li>重试</li></ol><div class="tip custom-block" style="padding-top:8px;"><p>关于如何使用中间件载荷? 前往 <a href="./interface-service.html#with">API-with</a>.</p></div><ul><li><strong>InitCtx</strong></li></ul><p>这个中间件用以初始化请求过程中的上下文。</p><ul><li><strong>Xsrf</strong></li></ul><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 响应数据载荷</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">IPayload</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在url上传入</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// POST请求时，在data中传入</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">boolean</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 传入时的keyname</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><strong>Body</strong></li></ul><p>这个中间件用以将params（query）拼接在url上，并将Post请求时的data处理成符合Fetch API的格式，适应headers中的content-type逻辑</p><ul><li><strong>Timeout</strong></li></ul><p>这个中间件用以控制超时逻辑，使用时请在FetchConfig中传入timeout 值即可使用。</p><ul><li><strong>Fetch</strong></li></ul><p>这个中间件用以发起请求，可以在初始化请求服务实例时覆盖传入至initConfig<a href="./interface-service.html#初始化">请求服务-初始化</a></p><p>此中间件的定位为获得响应，如果需要使用缓存等自定义的数据以跳过请求，请在此之前对context.response进行赋值。</p><ul><li><strong>ResData</strong></li></ul><p>这个中间件用以在response ok时解析结果，以获得json对象或者文本字符串或者其他格式的data，默认json。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 响应数据载荷</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">IPayload</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">arrayBuffer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">blob</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">formData</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><strong>Retry</strong></li></ul><p>这个中间件负责请求出错时，进行重试相关的逻辑</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 重试载荷</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">IPayload</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重试次数</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">times</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 自定义重试条件</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">condition</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">IRetryCondition</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 重试前的回调</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">onRetry</span><span style="color:#89DDFF;">?:</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">IRetryCallback</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,19))])}const A=p(i,[["render",D]]);export{g as __pageData,A as default};
